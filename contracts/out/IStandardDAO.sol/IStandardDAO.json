{"abi":[{"type":"function","name":"addMember","inputs":[{"name":"_member","type":"address","internalType":"address"},{"name":"_weight","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"createProposal","inputs":[{"name":"_name","type":"string","internalType":"string"},{"name":"_targetContract","type":"address","internalType":"address"},{"name":"_callData","type":"bytes","internalType":"bytes"},{"name":"_durationInDays","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"executeProposal","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"getMemberAtIndex","inputs":[{"name":"_index","type":"uint256","internalType":"uint256"}],"outputs":[{"name":"","type":"address","internalType":"address"}],"stateMutability":"view"},{"type":"function","name":"getMemberCount","inputs":[],"outputs":[{"name":"","type":"uint256","internalType":"uint256"}],"stateMutability":"view"},{"type":"function","name":"isMember","inputs":[{"name":"_member","type":"address","internalType":"address"}],"outputs":[{"name":"","type":"bool","internalType":"bool"}],"stateMutability":"view"},{"type":"function","name":"removeMember","inputs":[{"name":"_member","type":"address","internalType":"address"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"updateDAO","inputs":[{"name":"_newQuorum","type":"uint256","internalType":"uint256"},{"name":"_newVotingThreshold","type":"uint256","internalType":"uint256"},{"name":"_onlyMembersCanPropose","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"function","name":"vote","inputs":[{"name":"_proposalId","type":"uint256","internalType":"uint256"},{"name":"_support","type":"bool","internalType":"bool"}],"outputs":[],"stateMutability":"nonpayable"},{"type":"event","name":"DAOUpdated","inputs":[{"name":"newQuorum","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"newVotingThreshold","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MemberAdded","inputs":[{"name":"member","type":"address","indexed":false,"internalType":"address"},{"name":"weight","type":"uint256","indexed":false,"internalType":"uint256"}],"anonymous":false},{"type":"event","name":"MemberRemoved","inputs":[{"name":"member","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ProposalCreated","inputs":[{"name":"proposalId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"name","type":"string","indexed":false,"internalType":"string"},{"name":"proposer","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"ProposalExecuted","inputs":[{"name":"proposalId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"executor","type":"address","indexed":false,"internalType":"address"}],"anonymous":false},{"type":"event","name":"VoteCast","inputs":[{"name":"proposalId","type":"uint256","indexed":false,"internalType":"uint256"},{"name":"voter","type":"address","indexed":false,"internalType":"address"},{"name":"support","type":"bool","indexed":false,"internalType":"bool"}],"anonymous":false}],"bytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"deployedBytecode":{"object":"0x","sourceMap":"","linkReferences":{}},"methodIdentifiers":{"addMember(address,uint256)":"98041ea3","createProposal(string,address,bytes,uint256)":"a818d304","executeProposal(uint256)":"0d61b519","getMemberAtIndex(uint256)":"f8024d10","getMemberCount()":"997072f7","isMember(address)":"a230c524","removeMember(address)":"0b1ca49a","updateDAO(uint256,uint256,bool)":"1e1980bb","vote(uint256,bool)":"c9d27afe"},"rawMetadata":"{\"compiler\":{\"version\":\"0.8.22+commit.4fc1097e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newQuorum\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"newVotingThreshold\",\"type\":\"uint256\"}],\"name\":\"DAOUpdated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"weight\",\"type\":\"uint256\"}],\"name\":\"MemberAdded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"member\",\"type\":\"address\"}],\"name\":\"MemberRemoved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"proposer\",\"type\":\"address\"}],\"name\":\"ProposalCreated\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"executor\",\"type\":\"address\"}],\"name\":\"ProposalExecuted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"proposalId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"voter\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"support\",\"type\":\"bool\"}],\"name\":\"VoteCast\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"_weight\",\"type\":\"uint256\"}],\"name\":\"addMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"_name\",\"type\":\"string\"},{\"internalType\":\"address\",\"name\":\"_targetContract\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"_callData\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_durationInDays\",\"type\":\"uint256\"}],\"name\":\"createProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"}],\"name\":\"executeProposal\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_index\",\"type\":\"uint256\"}],\"name\":\"getMemberAtIndex\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"isMember\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_member\",\"type\":\"address\"}],\"name\":\"removeMember\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_newQuorum\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_newVotingThreshold\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_onlyMembersCanPropose\",\"type\":\"bool\"}],\"name\":\"updateDAO\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_proposalId\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"_support\",\"type\":\"bool\"}],\"name\":\"vote\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"addMember(address,uint256)\":{\"details\":\"Adds a new member to the DAO.\",\"params\":{\"_member\":\"The address of the member to add.\",\"_weight\":\"The weight of the member's vote.\"}},\"createProposal(string,address,bytes,uint256)\":{\"details\":\"Creates a new proposal.\",\"params\":{\"_callData\":\"The calldata to be executed on the target contract.\",\"_durationInDays\":\"The duration of the proposal in days.\",\"_name\":\"The name of the proposal.\",\"_targetContract\":\"The address of the contract to be called.\"}},\"executeProposal(uint256)\":{\"details\":\"Executes a proposal if it has passed and has not been executed yet.\",\"params\":{\"_proposalId\":\"The ID of the proposal to execute.\"}},\"getMemberAtIndex(uint256)\":{\"details\":\"Returns the address of a member at a given index.\",\"params\":{\"_index\":\"The index of the member to retrieve.\"},\"returns\":{\"_0\":\"The address of the member.\"}},\"getMemberCount()\":{\"details\":\"Returns the number of members in the DAO.\",\"returns\":{\"_0\":\"The number of members.\"}},\"isMember(address)\":{\"details\":\"Returns whether an address is a member of the DAO.\",\"params\":{\"_member\":\"The address to check.\"},\"returns\":{\"_0\":\"True if the address is a member, false otherwise.\"}},\"removeMember(address)\":{\"details\":\"Removes a member from the DAO.\",\"params\":{\"_member\":\"The address of the member to remove.\"}},\"updateDAO(uint256,uint256,bool)\":{\"details\":\"Updates the DAO's parameters.\",\"params\":{\"_newQuorum\":\"The new quorum for voting.\",\"_newVotingThreshold\":\"The new voting threshold.\",\"_onlyMembersCanPropose\":\"Flag indicating if only members can create proposals.\"}},\"vote(uint256,bool)\":{\"details\":\"Casts a vote for a proposal.\",\"params\":{\"_proposalId\":\"The ID of the proposal.\",\"_support\":\"True to vote in favor, false to vote against.\"}}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"src/interfaces/IStandardDAO.sol\":\"IStandardDAO\"},\"evmVersion\":\"shanghai\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\"},\"optimizer\":{\"enabled\":false,\"runs\":200},\"remappings\":[\":@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\":erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/\",\":forge-std/=lib/forge-std/src/\",\":halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/\",\":openzeppelin-contracts/=lib/openzeppelin-contracts/\"]},\"sources\":{\"src/interfaces/IStandardDAO.sol\":{\"keccak256\":\"0x39705e95a9d2d35420645240a951c741dfefd35e432e77ec14cecd72dadc7c4a\",\"license\":\"MIT\",\"urls\":[\"bzz-raw://757a29b7c15054cf4bd66cde2768ea96cbeeaba2219b1ee6b5621c6375ff1870\",\"dweb:/ipfs/QmUx3hNG9MTnWmJpmEZuYVAKbTqkwUERfbeNM8euwkFSuA\"]}},\"version\":1}","metadata":{"compiler":{"version":"0.8.22+commit.4fc1097e"},"language":"Solidity","output":{"abi":[{"inputs":[{"internalType":"uint256","name":"newQuorum","type":"uint256","indexed":false},{"internalType":"uint256","name":"newVotingThreshold","type":"uint256","indexed":false}],"type":"event","name":"DAOUpdated","anonymous":false},{"inputs":[{"internalType":"address","name":"member","type":"address","indexed":false},{"internalType":"uint256","name":"weight","type":"uint256","indexed":false}],"type":"event","name":"MemberAdded","anonymous":false},{"inputs":[{"internalType":"address","name":"member","type":"address","indexed":false}],"type":"event","name":"MemberRemoved","anonymous":false},{"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256","indexed":false},{"internalType":"string","name":"name","type":"string","indexed":false},{"internalType":"address","name":"proposer","type":"address","indexed":false}],"type":"event","name":"ProposalCreated","anonymous":false},{"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256","indexed":false},{"internalType":"address","name":"executor","type":"address","indexed":false}],"type":"event","name":"ProposalExecuted","anonymous":false},{"inputs":[{"internalType":"uint256","name":"proposalId","type":"uint256","indexed":false},{"internalType":"address","name":"voter","type":"address","indexed":false},{"internalType":"bool","name":"support","type":"bool","indexed":false}],"type":"event","name":"VoteCast","anonymous":false},{"inputs":[{"internalType":"address","name":"_member","type":"address"},{"internalType":"uint256","name":"_weight","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"addMember"},{"inputs":[{"internalType":"string","name":"_name","type":"string"},{"internalType":"address","name":"_targetContract","type":"address"},{"internalType":"bytes","name":"_callData","type":"bytes"},{"internalType":"uint256","name":"_durationInDays","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"createProposal"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"}],"stateMutability":"nonpayable","type":"function","name":"executeProposal"},{"inputs":[{"internalType":"uint256","name":"_index","type":"uint256"}],"stateMutability":"view","type":"function","name":"getMemberAtIndex","outputs":[{"internalType":"address","name":"","type":"address"}]},{"inputs":[],"stateMutability":"view","type":"function","name":"getMemberCount","outputs":[{"internalType":"uint256","name":"","type":"uint256"}]},{"inputs":[{"internalType":"address","name":"_member","type":"address"}],"stateMutability":"view","type":"function","name":"isMember","outputs":[{"internalType":"bool","name":"","type":"bool"}]},{"inputs":[{"internalType":"address","name":"_member","type":"address"}],"stateMutability":"nonpayable","type":"function","name":"removeMember"},{"inputs":[{"internalType":"uint256","name":"_newQuorum","type":"uint256"},{"internalType":"uint256","name":"_newVotingThreshold","type":"uint256"},{"internalType":"bool","name":"_onlyMembersCanPropose","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"updateDAO"},{"inputs":[{"internalType":"uint256","name":"_proposalId","type":"uint256"},{"internalType":"bool","name":"_support","type":"bool"}],"stateMutability":"nonpayable","type":"function","name":"vote"}],"devdoc":{"kind":"dev","methods":{"addMember(address,uint256)":{"details":"Adds a new member to the DAO.","params":{"_member":"The address of the member to add.","_weight":"The weight of the member's vote."}},"createProposal(string,address,bytes,uint256)":{"details":"Creates a new proposal.","params":{"_callData":"The calldata to be executed on the target contract.","_durationInDays":"The duration of the proposal in days.","_name":"The name of the proposal.","_targetContract":"The address of the contract to be called."}},"executeProposal(uint256)":{"details":"Executes a proposal if it has passed and has not been executed yet.","params":{"_proposalId":"The ID of the proposal to execute."}},"getMemberAtIndex(uint256)":{"details":"Returns the address of a member at a given index.","params":{"_index":"The index of the member to retrieve."},"returns":{"_0":"The address of the member."}},"getMemberCount()":{"details":"Returns the number of members in the DAO.","returns":{"_0":"The number of members."}},"isMember(address)":{"details":"Returns whether an address is a member of the DAO.","params":{"_member":"The address to check."},"returns":{"_0":"True if the address is a member, false otherwise."}},"removeMember(address)":{"details":"Removes a member from the DAO.","params":{"_member":"The address of the member to remove."}},"updateDAO(uint256,uint256,bool)":{"details":"Updates the DAO's parameters.","params":{"_newQuorum":"The new quorum for voting.","_newVotingThreshold":"The new voting threshold.","_onlyMembersCanPropose":"Flag indicating if only members can create proposals."}},"vote(uint256,bool)":{"details":"Casts a vote for a proposal.","params":{"_proposalId":"The ID of the proposal.","_support":"True to vote in favor, false to vote against."}}},"version":1},"userdoc":{"kind":"user","methods":{},"version":1}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","erc4626-tests/=lib/openzeppelin-contracts/lib/erc4626-tests/","forge-std/=lib/forge-std/src/","halmos-cheatcodes/=lib/openzeppelin-contracts/lib/halmos-cheatcodes/src/","openzeppelin-contracts/=lib/openzeppelin-contracts/"],"optimizer":{"enabled":false,"runs":200},"metadata":{"bytecodeHash":"ipfs"},"compilationTarget":{"src/interfaces/IStandardDAO.sol":"IStandardDAO"},"evmVersion":"shanghai","libraries":{}},"sources":{"src/interfaces/IStandardDAO.sol":{"keccak256":"0x39705e95a9d2d35420645240a951c741dfefd35e432e77ec14cecd72dadc7c4a","urls":["bzz-raw://757a29b7c15054cf4bd66cde2768ea96cbeeaba2219b1ee6b5621c6375ff1870","dweb:/ipfs/QmUx3hNG9MTnWmJpmEZuYVAKbTqkwUERfbeNM8euwkFSuA"],"license":"MIT"}},"version":1},"id":37}